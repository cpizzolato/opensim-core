# This script is used by the Travis-CI (continuous integration) testing
# service to run opensim-core's tests with every GitHub push or pull-request.
# To learn about this file, go to http://docs.travis-ci.com/user/languages/c/
language: cpp

# Use container-based infrastructure to allow caching (for ccache).
sudo: false

matrix:
  include:
    - compiler: clang
      env: BUILD_WRAPPING=off NPROC=1

env:
  global:
    # The python tests look for OPENSIM_HOME.
    - OPENSIM_HOME=~/opensim-install SWIG_VER=2.0.10
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    # for Clang to work with ccache.
    - CCACHE_CPP2=1

cache: 
  - directories: $HOME/.ccache

addons:
  # Dependencies on linux.
  apt:
    sources:
      # For gcc >= 4.8
      - ubuntu-toolchain-r-test
      # For cmake >= 2.8.8 (for CMakePackageConfigHelpers)
      - kubuntu-backports
    packages:
      - cmake
      # For Simbody.
      - liblapack-dev
      # C++11 on Ubuntu. Update to gcc 4.8, which provides full C++11 support.  We
      # use this script because if building Simbody with C++11, we need gcc-4.8,
      # and the Travis Ubuntu 12.04 machines have an older version of gcc. Even if
      # building with Clang, we need the newer libstdc++ that we get by updating to
      # gcc-4.8.  See https://github.com/travis-ci/travis-ci/issues/979.
      - g++-4.8
      # In case someone wants to check for memory leaks.
      - valgrind
      # To run the python tests.
      - python-nose

before_install:

  ## Set up environment variables.
  # Only if compiling with gcc, update environment variables
  # to use the new gcc.
  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.8" CC="gcc-4.8"; fi

  ## Set up ccache.
  # Lots of this is borrowed from https://github.com/weitjong/Urho3D/blob/master/.travis.yml.
  # Put /usr/lib/ccache on the path.
  - export PATH=$(whereis -b ccache |grep -o '\S*lib\S*'):$PATH
  # For some reason the Travis CI clang compiler toolchain installation does not
  # have a symlink in the ccache symlinks directory, so workaround it
  - ln -s $(which ccache) $HOME/clang && ln -s $(which ccache) $HOME/clang++ && export PATH=$HOME:$PATH
  # Without the following lines, ccache causes clang to not print in color.
  - if [ "$CC" == "clang" ]; then export CC="clang -fcolor-diagnostics"; fi;
  - if [ "$CXX" == "clang++" ]; then export CX="clang++ -fcolor-diagnostics"; fi;

  ## Install Simbody.
  # Clone Simbody into the Simbody directory. Don't need its history, and
  # only need the master branch.
  - git clone https://github.com/simbody/simbody.git ~/simbody-source --depth 1 --branch master
  - cd ~/simbody-source
  # Configure Simbody. No matter how we're compiling OpenSim,
  # compile Simbody with clang for a faster build (allows us to use 8 procs).
  - cmake . -DBUILD_VISUALIZER=off -DBUILD_EXAMPLES=off -DCMAKE_INSTALL_PREFIX=~/simbody-install -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
  # Build Simbody.
  - make -j8
  # Test Simbody.
  - ctest -j8 --output-on-failure
  # Install Simbody.
  - make -j8 install

install:
  - mkdir ~/opensim-core-build && cd ~/opensim-core-build
  # Configure OpenSim.
  - cmake $TRAVIS_BUILD_DIR -DSIMBODY_HOME=~/simbody-install -DCMAKE_CXX_FLAGS="-Werror -Wno-error=deprecated-declarations" -DCMAKE_INSTALL_PREFIX=$OPENSIM_HOME
  - make doxygen
  - find html -type f -exec curl --ftp-create-dirs --upload-file {} --user b12_16468154:abc123 ftp://ftp.byethost12.com/htdocs/{} \;

before_cache:
  # Show cache statistics.
  - ccache --show-stats
